# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cockroach/proto/api.proto

require 'google/protobuf'

require 'cockroach/proto/config'
require 'cockroach/proto/data'
require 'cockroach/proto/errors'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "cockroach.proto.ClientCmdID" do
    optional :wall_time, :int64, 1
    optional :random, :int64, 2
  end
  add_message "cockroach.proto.RequestHeader" do
    optional :timestamp, :message, 1, "cockroach.proto.Timestamp"
    optional :cmd_id, :message, 2, "cockroach.proto.ClientCmdID"
    optional :key, :string, 3
    optional :end_key, :string, 4
    optional :user, :string, 5
    optional :replica, :message, 6, "cockroach.proto.Replica"
    optional :raft_id, :int64, 7
    optional :user_priority, :int32, 8
    optional :txn, :message, 9, "cockroach.proto.Transaction"
    optional :read_consistency, :enum, 10, "cockroach.proto.ReadConsistencyType"
  end
  add_message "cockroach.proto.ResponseHeader" do
    optional :error, :message, 1, "cockroach.proto.Error"
    optional :timestamp, :message, 2, "cockroach.proto.Timestamp"
    optional :txn, :message, 3, "cockroach.proto.Transaction"
  end
  add_message "cockroach.proto.ContainsRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
  end
  add_message "cockroach.proto.ContainsResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    optional :exists, :bool, 2
  end
  add_message "cockroach.proto.GetRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
  end
  add_message "cockroach.proto.GetResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    optional :value, :message, 2, "cockroach.proto.Value"
  end
  add_message "cockroach.proto.PutRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :value, :message, 2, "cockroach.proto.Value"
  end
  add_message "cockroach.proto.PutResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
  end
  add_message "cockroach.proto.ConditionalPutRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :value, :message, 2, "cockroach.proto.Value"
    optional :exp_value, :message, 3, "cockroach.proto.Value"
  end
  add_message "cockroach.proto.ConditionalPutResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
  end
  add_message "cockroach.proto.IncrementRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :increment, :int64, 2
  end
  add_message "cockroach.proto.IncrementResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    optional :new_value, :int64, 2
  end
  add_message "cockroach.proto.DeleteRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
  end
  add_message "cockroach.proto.DeleteResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
  end
  add_message "cockroach.proto.DeleteRangeRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :max_entries_to_delete, :int64, 2
  end
  add_message "cockroach.proto.DeleteRangeResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    optional :num_deleted, :int64, 2
  end
  add_message "cockroach.proto.ScanRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :max_results, :int64, 2
  end
  add_message "cockroach.proto.ScanResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    repeated :rows, :message, 2, "cockroach.proto.KeyValue"
  end
  add_message "cockroach.proto.EndTransactionRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :commit, :bool, 2
    optional :internal_commit_trigger, :message, 3, "cockroach.proto.InternalCommitTrigger"
  end
  add_message "cockroach.proto.EndTransactionResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    optional :commit_wait, :int64, 2
    repeated :resolved, :string, 3
  end
  add_message "cockroach.proto.RequestUnion" do
    oneof :value do
      optional :contains, :message, 1, "cockroach.proto.ContainsRequest"
      optional :get, :message, 2, "cockroach.proto.GetRequest"
      optional :put, :message, 3, "cockroach.proto.PutRequest"
      optional :conditional_put, :message, 4, "cockroach.proto.ConditionalPutRequest"
      optional :increment, :message, 5, "cockroach.proto.IncrementRequest"
      optional :delete, :message, 6, "cockroach.proto.DeleteRequest"
      optional :delete_range, :message, 7, "cockroach.proto.DeleteRangeRequest"
      optional :scan, :message, 8, "cockroach.proto.ScanRequest"
      optional :end_transaction, :message, 9, "cockroach.proto.EndTransactionRequest"
    end
  end
  add_message "cockroach.proto.ResponseUnion" do
    oneof :value do
      optional :contains, :message, 1, "cockroach.proto.ContainsResponse"
      optional :get, :message, 2, "cockroach.proto.GetResponse"
      optional :put, :message, 3, "cockroach.proto.PutResponse"
      optional :conditional_put, :message, 4, "cockroach.proto.ConditionalPutResponse"
      optional :increment, :message, 5, "cockroach.proto.IncrementResponse"
      optional :delete, :message, 6, "cockroach.proto.DeleteResponse"
      optional :delete_range, :message, 7, "cockroach.proto.DeleteRangeResponse"
      optional :scan, :message, 8, "cockroach.proto.ScanResponse"
      optional :end_transaction, :message, 9, "cockroach.proto.EndTransactionResponse"
    end
  end
  add_message "cockroach.proto.BatchRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    repeated :requests, :message, 2, "cockroach.proto.RequestUnion"
  end
  add_message "cockroach.proto.BatchResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
    repeated :responses, :message, 2, "cockroach.proto.ResponseUnion"
  end
  add_message "cockroach.proto.AdminSplitRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
    optional :split_key, :string, 2
  end
  add_message "cockroach.proto.AdminSplitResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
  end
  add_message "cockroach.proto.AdminMergeRequest" do
    optional :header, :message, 1, "cockroach.proto.RequestHeader"
  end
  add_message "cockroach.proto.AdminMergeResponse" do
    optional :header, :message, 1, "cockroach.proto.ResponseHeader"
  end
  add_enum "cockroach.proto.ReadConsistencyType" do
    value :CONSISTENT, 0
    value :CONSENSUS, 1
    value :INCONSISTENT, 2
  end
end

module Cockroach
  module Proto
    ClientCmdID = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ClientCmdID").msgclass
    RequestHeader = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.RequestHeader").msgclass
    ResponseHeader = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ResponseHeader").msgclass
    ContainsRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ContainsRequest").msgclass
    ContainsResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ContainsResponse").msgclass
    GetRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.GetRequest").msgclass
    GetResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.GetResponse").msgclass
    PutRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.PutRequest").msgclass
    PutResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.PutResponse").msgclass
    ConditionalPutRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ConditionalPutRequest").msgclass
    ConditionalPutResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ConditionalPutResponse").msgclass
    IncrementRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.IncrementRequest").msgclass
    IncrementResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.IncrementResponse").msgclass
    DeleteRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.DeleteRequest").msgclass
    DeleteResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.DeleteResponse").msgclass
    DeleteRangeRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.DeleteRangeRequest").msgclass
    DeleteRangeResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.DeleteRangeResponse").msgclass
    ScanRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ScanRequest").msgclass
    ScanResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ScanResponse").msgclass
    EndTransactionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.EndTransactionRequest").msgclass
    EndTransactionResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.EndTransactionResponse").msgclass
    RequestUnion = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.RequestUnion").msgclass
    ResponseUnion = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ResponseUnion").msgclass
    BatchRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.BatchRequest").msgclass
    BatchResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.BatchResponse").msgclass
    AdminSplitRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.AdminSplitRequest").msgclass
    AdminSplitResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.AdminSplitResponse").msgclass
    AdminMergeRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.AdminMergeRequest").msgclass
    AdminMergeResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.AdminMergeResponse").msgclass
    ReadConsistencyType = Google::Protobuf::DescriptorPool.generated_pool.lookup("cockroach.proto.ReadConsistencyType").enummodule
  end
end
